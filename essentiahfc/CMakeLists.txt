####################################################################################################
# CMakeLists file for EssentiaHFC
# Generated by Jildert Viet
# 2024-11-15
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "EssentiaHFC")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()
####################################################################################################
# Begin target EssentiaHFC

set(EssentiaHFC_cpp_files
    plugins/EssentiaHFC/EssentiaHFC.cpp
    plugins/EssentiaHFC/EssentiaHFC.hpp
)
set(EssentiaHFC_sc_files
    plugins/EssentiaHFC/EssentiaHFC.sc
)
set(EssentiaHFC_schelp_files
    plugins/EssentiaHFC/EssentiaHFC.schelp
)

# Define the EssentiaHFC plugin target
# add_library(EssentiaHFC SHARED ${EssentiaHFC_cpp_files})

# Call sc_add_server_plugin to install the plugin files
sc_add_server_plugin(
    "EssentiaHFC/EssentiaHFC" # destination directory
    "EssentiaHFC"             # target name
    "${EssentiaHFC_cpp_files}"
    "${EssentiaHFC_sc_files}"
    "${EssentiaHFC_schelp_files}"
)

find_library(ESSENTIA_LIBRARY NAMES essentia PATHS /usr/local/lib)

if(ESSENTIA_LIBRARY)
    message(STATUS "Found Essentia library: ${ESSENTIA_LIBRARY}")
    if(SCSYNTH)
    target_link_libraries("EssentiaHFC_scsynth" ${ESSENTIA_LIBRARY})
    target_link_options("EssentiaHFC_scsynth" PRIVATE -Wl,-rpath,/usr/local/lib)
  endif()

  if(SUPERNOVA)
    target_link_libraries("EssentiaHFC_supernova" ${ESSENTIA_LIBRARY})
    target_link_options("EssentiaHFC_supernova" PRIVATE -Wl,-rpath,/usr/local/lib)
  endif()
else()
    message(FATAL_ERROR "Essentia library not found in /usr/local/lib")
endif()
# Link the Essentia library


# End target EssentiaHFC
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
